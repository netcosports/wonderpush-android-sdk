apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'

project.group = 'com.netcosports.wonderpush'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 14
        consumerProguardFiles 'proguard-exported.pro'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation "com.google.firebase:firebase-messaging:17.3.4"
    compileOnly "com.google.android.gms:play-services-ads-identifier:16.0.0" // for AdvertisingId
    // Use the full support-v4 instead of the module support-compat
    // because com.google.firebase:firebase-messaging (indirectly) depends on it
    // and all modules must use the same version.
    implementation 'com.android.support:support-v4:28.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20160810'
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xdiags:verbose"
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

task setVersion {
    // The version will be derived from source
    project.version = null
    def sdkVersionFile = file('src/main/java/com/wonderpush/sdk/WonderPush.java')
    sdkVersionFile.eachLine {
        def versionMatcher = (it =~ /(?:.*SDK_SHORT_VERSION = ")(.*)(?:".*)/)
        if (versionMatcher.matches()) {
            project.version = versionMatcher[0][1]
        }
    }
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = project.group
            artifactId "wonderpush-android-sdk"

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            def result = new HashMap<String, Dependency>()
            configurations.api.allDependencies.each {
                result[it.group + '_' + it.name + '_' + it.version] = it
            }
            configurations.implementation.allDependencies.each {
                result[it.group + '_' + it.name + '_' + it.version] = it
            }

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')

                result.values().each {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}


artifactory {
    contextUrl = 'http://artifactory-blr.netcodev.com/artifactory'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = 'libs-release-local'

            username = repoUsername
            password = repoPassword
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
//            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}
